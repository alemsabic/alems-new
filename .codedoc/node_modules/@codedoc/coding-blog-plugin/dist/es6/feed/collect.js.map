{"version":3,"file":"collect.js","sourceRoot":"","sources":["../../../src/feed/collect.ts"],"names":[],"mappings":"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","sourcesContent":["import git from 'simple-git';\nimport { parse, join } from 'path';\nimport { Item } from 'feed/src/typings';\nimport { Compiled } from '@connectv/sdh';\nimport { CodedocConfig } from '@codedoc/core';\nimport { File } from 'rxline/fs';\n\nimport { PartialConfig } from './config';\n\n\nexport function collect(conf: PartialConfig, add: (item: Item) => void) {\n  return async (html: HTMLDocument, file: File<Compiled>, config: CodedocConfig) => {\n    if (file.path === '404.md' || file.path === 'index.md' || conf.exclude && conf.exclude.includes(file.path)) {\n      return;\n    }\n    const url = `${conf.url}${config.dest.namespace}/${\n      file.path.substr(0, file.path.length - parse(file.path).ext.length)\n    }`;\n\n    let title = '';\n    let description = '';\n    let image = '';\n    let content = '';\n    let candidate$: HTMLElement | null;\n\n    if (candidate$ = html.head.querySelector('meta[property=\"og:title\"]')) {\n      title = candidate$.getAttribute('content') || '';\n    } else if (candidate$ = html.head.querySelector('title')) {\n      title = candidate$.textContent || '';\n    }\n\n    if (candidate$ = html.head.querySelector('meta[property=\"og:description\"],meta[name=\"description\"]')) {\n      description = candidate$.getAttribute('content') || 'No description';\n    }\n\n    if (candidate$ = html.head.querySelector('meta[property=\"og:image\"]')) {\n      image = candidate$.getAttribute('content') || '';\n    }\n\n    if (candidate$ = html.body.querySelector('#-codedoc-container p')) {\n      content = (candidate$.textContent || '') + ' ...';\n    }\n\n    const commits = await git().log({ file: join(file.root, file.path)});\n    const first = commits.all[commits.all.length - 1];\n    const authors: {name: string, email: string}[] = [];\n    commits.all.forEach(commit => {\n      if (!authors.find(author => author.email === commit.author_email))\n        authors.push({\n          name: commit.author_name,\n          email: commit.author_email,\n        });\n    });\n\n    add({\n      link: url,\n      id: url,\n      title,\n      description,\n      image,\n      date: commits && commits.latest ? new Date(commits?.latest?.date) : new Date(),\n      published: first ? new Date(first.date) : new Date(),\n      author: authors.length === 0? [{name: 'Anonymous', email: 'unknown'}]: authors,\n      content,\n    });\n  }\n}\n"]}