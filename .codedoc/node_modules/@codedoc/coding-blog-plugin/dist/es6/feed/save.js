var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Feed } from 'feed';
import { writeFile } from 'rxline/fs';
import { fill } from './config';
export function save(config, items) {
    return function saveFeed(build) {
        return __awaiter(this, void 0, void 0, function* () {
            const conf = fill(config, build.config);
            const feed = new Feed({
                title: conf.title,
                copyright: '',
                id: conf.url + build.config.dest.namespace,
                link: conf.url + build.config.dest.namespace,
                favicon: conf.url + build.config.dest.namespace + build.config.page.favicon,
                description: '',
                feedLinks: {
                    json: conf.url + '/_feed.json',
                    atom: conf.url + '/_feed.atom',
                    rss: conf.url + '/_feed.rss',
                }
            });
            items.forEach(item => feed.addItem(item));
            yield Promise.all([
                writeFile()({
                    root: build.config.dest.html,
                    path: '_feed.rss',
                    content: feed.rss2()
                }),
                writeFile()({
                    root: build.config.dest.html,
                    path: '_feed.atom',
                    content: feed.atom1()
                }),
                writeFile()({
                    root: build.config.dest.html,
                    path: '_feed.json',
                    content: feed.json1()
                }),
            ]);
        });
    };
}
//# sourceMappingURL=save.js.map