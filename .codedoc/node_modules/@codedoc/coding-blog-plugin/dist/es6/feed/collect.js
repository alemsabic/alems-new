var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import git from 'simple-git';
import { parse, join } from 'path';
export function collect(conf, add) {
    return (html, file, config) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        if (file.path === '404.md' || file.path === 'index.md' || conf.exclude && conf.exclude.includes(file.path)) {
            return;
        }
        const url = `${conf.url}${config.dest.namespace}/${file.path.substr(0, file.path.length - parse(file.path).ext.length)}`;
        let title = '';
        let description = '';
        let image = '';
        let content = '';
        let candidate$;
        if (candidate$ = html.head.querySelector('meta[property="og:title"]')) {
            title = candidate$.getAttribute('content') || '';
        }
        else if (candidate$ = html.head.querySelector('title')) {
            title = candidate$.textContent || '';
        }
        if (candidate$ = html.head.querySelector('meta[property="og:description"],meta[name="description"]')) {
            description = candidate$.getAttribute('content') || 'No description';
        }
        if (candidate$ = html.head.querySelector('meta[property="og:image"]')) {
            image = candidate$.getAttribute('content') || '';
        }
        if (candidate$ = html.body.querySelector('#-codedoc-container p')) {
            content = (candidate$.textContent || '') + ' ...';
        }
        const commits = yield git().log({ file: join(file.root, file.path) });
        const first = commits.all[commits.all.length - 1];
        const authors = [];
        commits.all.forEach(commit => {
            if (!authors.find(author => author.email === commit.author_email))
                authors.push({
                    name: commit.author_name,
                    email: commit.author_email,
                });
        });
        add({
            link: url,
            id: url,
            title,
            description,
            image,
            date: commits && commits.latest ? new Date((_a = commits === null || commits === void 0 ? void 0 : commits.latest) === null || _a === void 0 ? void 0 : _a.date) : new Date(),
            published: first ? new Date(first.date) : new Date(),
            author: authors.length === 0 ? [{ name: 'Anonymous', email: 'unknown' }] : authors,
            content,
        });
    });
}
//# sourceMappingURL=collect.js.map