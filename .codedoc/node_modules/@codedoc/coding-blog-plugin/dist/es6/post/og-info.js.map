{"version":3,"file":"og-info.js","sourceRoot":"","sources":["../../../src/post/og-info.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAG/C,MAAM,QAAQ,GAAG,gBAAgB,CAAC;AAGlC,MAAM,UAAU,SAAS;IACvB,MAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;IACtC,OAAO,UAAS,IAAkB;QAChC,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAChD,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAC;QAElE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,0BAA0B,CAAC,EAAE;YACxD,QAAQ,CAAC,MAAM,CAAC,0BAAM,QAAQ,EAAC,SAAS,EAAC,OAAO,EAAC,SAAS,GAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7E;QAED,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,2BAA2B,CAAC,EAAE;YACnE,QAAQ,CAAC,MAAM,CAAC,0BAAM,QAAQ,EAAC,UAAU,EAAC,OAAO,EAAE,MAAM,CAAC,WAAW,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC/F;QAED,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,iCAAiC,CAAC,EAAE;YACxE,QAAQ,CAAC,MAAM,CAAC,0BAAM,QAAQ,EAAC,gBAAgB,EAAC,OAAO,EAAE,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChH;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,2BAA2B,CAAC,EAAE;YACzD,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;YAClE,IAAI,UAAU,EAAE;gBACd,IAAI,GAAG,GAAuB,SAAS,CAAC;gBAExC,UAAU,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC5D,IAAI,CAAC,GAAG,EAAE;wBACR,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;wBACpF,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;4BAAE,GAAG,GAAG,SAAS,CAAC;qBAC/C;gBACH,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,GAAG,EAAE;oBACR,UAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBACjD,IAAI,CAAC,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE;4BAC1D,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;yBACvC;oBACH,CAAC,CAAC,CAAC;iBACJ;gBAED,IAAI,GAAG,EAAE;oBACP,QAAQ,CAAC,MAAM,CAAC,0BAAM,QAAQ,EAAC,UAAU,EAAC,OAAO,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC1E;aACF;SACF;IACH,CAAC,CAAA;AACH,CAAC","sourcesContent":["import { StaticRenderer } from '@connectv/sdh';\n\n\nconst URLRegex = /^http(s)\\:\\/\\//;\n\n\nexport function addOGMeta() {\n  const renderer = new StaticRenderer();\n  return function(html: HTMLDocument) {\n    const title$ = html.head.querySelector('title');\n    const desc$ = html.head.querySelector('meta[name=\"description\"]');\n\n    if (!html.head.querySelector('meta[property=\"og:type\"]')) {\n      renderer.render(<meta property=\"og:type\" content=\"article\"/>).on(html.head);\n    }\n\n    if (title$ && !html.head.querySelector('meta[property=\"og:title\"]')) {\n      renderer.render(<meta property=\"og:title\" content={title$.textContent || ''}/>).on(html.head);\n    }\n\n    if (desc$ && !html.head.querySelector('meta[property=\"og:description\"]')) {\n      renderer.render(<meta property=\"og:description\" content={desc$.getAttribute('content') || ''}/>).on(html.head);\n    }\n\n    if (!html.head.querySelector('meta[property=\"og:image\"]')) {\n      const container$ = html.body.querySelector('#-codedoc-container');\n      if (container$) {\n        let src: string | undefined = undefined; \n\n        container$.querySelectorAll('img[data-hero]').forEach(hero$ => {\n          if (!src) {\n            const potential = hero$.getAttribute('data-src') || hero$.getAttribute('src') || '';\n            if (URLRegex.test(potential)) src = potential;\n          }\n        });\n\n        if (!src) {\n          container$.querySelectorAll('img').forEach(hero$ => {\n            if (!src && URLRegex.test(hero$.getAttribute('src') || '')) {\n              src = hero$.getAttribute('src') || '';\n            }\n          });\n        }\n\n        if (src) {\n          renderer.render(<meta property=\"og:image\" content={src}/>).on(html.head);\n        }\n      }\n    }\n  }\n}\n"]}