{"version":3,"file":"twitter-info.js","sourceRoot":"","sources":["../../../src/post/twitter-info.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAG/C,MAAM,QAAQ,GAAG,gBAAgB,CAAC;AAGlC,MAAM,UAAU,cAAc;IAC5B,MAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;IACtC,OAAO,UAAS,IAAkB;QAChC,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAChD,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAC;QAElE,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,4BAA4B,CAAC,EAAE;YACpE,QAAQ,CAAC,MAAM,CAAC,0BAAM,IAAI,EAAC,eAAe,EAAC,OAAO,EAAE,MAAM,CAAC,WAAW,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChG;QAED,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,kCAAkC,CAAC,EAAE;YACzE,QAAQ,CAAC,MAAM,CAAC,0BAAM,IAAI,EAAC,qBAAqB,EAAC,OAAO,EAAE,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjH;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,4BAA4B,CAAC,EAAE;YAC1D,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;YAClE,IAAI,UAAU,EAAE;gBACd,IAAI,IAAI,GAA4B,SAAS,CAAC;gBAE9C,UAAU,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC5D,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE;wBAC3D,IAAI,GAAG,KAAoB,CAAC;qBAC7B;gBACH,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,IAAI,EAAE;oBACT,UAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBACjD,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE;4BAC3D,IAAI,GAAG,KAAoB,CAAC;yBAC7B;oBACH,CAAC,CAAC,CAAC;iBACJ;gBAED,IAAI,IAAI,EAAE;oBACR,MAAM,GAAG,GAAI,IAAoB,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;oBAC5D,QAAQ,CAAC,MAAM,CAAC,0BAAM,IAAI,EAAC,eAAe,EAAC,OAAO,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC3E;aACF;SACF;IACH,CAAC,CAAA;AACH,CAAC","sourcesContent":["import { StaticRenderer } from '@connectv/sdh';\n\n\nconst URLRegex = /^http(s)\\:\\/\\//;\n\n\nexport function addTwitterMeta() {\n  const renderer = new StaticRenderer();\n  return function(html: HTMLDocument) {\n    const title$ = html.head.querySelector('title');\n    const desc$ = html.head.querySelector('meta[name=\"description\"]');\n\n    if (title$ && !html.head.querySelector('meta[name=\"twitter:title\"]')) {\n      renderer.render(<meta name=\"twitter:title\" content={title$.textContent || ''}/>).on(html.head);\n    }\n\n    if (desc$ && !html.head.querySelector('meta[name=\"twitter:description\"]')) {\n      renderer.render(<meta name=\"twitter:description\" content={desc$.getAttribute('content') || ''}/>).on(html.head);\n    }\n\n    if (!html.head.querySelector('meta[name=\"twitter:image\"]')) {\n      const container$ = html.body.querySelector('#-codedoc-container');\n      if (container$) {\n        let img$: HTMLElement | undefined = undefined; \n\n        container$.querySelectorAll('img[data-hero]').forEach(hero$ => {\n          if (!img$ && URLRegex.test(hero$.getAttribute('src') || '')) {\n            img$ = hero$ as HTMLElement;\n          }\n        });\n\n        if (!img$) {\n          container$.querySelectorAll('img').forEach(hero$ => {\n            if (!img$ && URLRegex.test(hero$.getAttribute('src') || '')) {\n              img$ = hero$ as HTMLElement;\n            }\n          });\n        }\n\n        if (img$) {\n          const src = (img$ as HTMLElement).getAttribute('src') || '';\n          renderer.render(<meta name=\"twitter:image\" content={src}/>).on(html.head);\n        }\n      }\n    }\n  }\n}\n"]}