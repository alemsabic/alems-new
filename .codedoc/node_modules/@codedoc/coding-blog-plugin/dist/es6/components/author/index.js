import { rxLiteral as rxl } from '@connectv/html';
import { transport } from '@connectv/sdh/transport';
import { BehaviorSubject } from 'rxjs';
import { ajax } from 'rxjs/ajax';
import { AuthorStyle } from './style';
function isDirect(options) {
    return !options.src;
}
const _DefaultAvatar = 'https://www.wallpaperup.com/uploads/wallpapers/2017/09/17/1099153/afb7cf163e10008fb6ca7ca80e8c9a6d-700.jpg';
export function Author(options, renderer) {
    const classes = this.theme.classes(AuthorStyle);
    const avatar = new BehaviorSubject(_DefaultAvatar);
    const name = new BehaviorSubject('Anonymous Author');
    const date = new BehaviorSubject('Unspecified Date');
    const url = new BehaviorSubject('');
    this.track({
        bind() {
            if (isDirect(options)) {
                name.next(options.name);
                date.next(options.date);
                if (options.avatar)
                    avatar.next(options.avatar);
                if (options.url)
                    url.next(options.url);
            }
            else {
                if (options.src === 'github') {
                    const src = window.source;
                    const github = window.githubConfig;
                    if (src && github) {
                        ajax.getJSON(`https://api.github.com/repos/${github.user}/${github.repo}/commits`
                            + `?path=${src.base}/${src.path}`)
                            .subscribe(res => {
                            var _a, _b;
                            if (res.length) {
                                const commit = res[0];
                                avatar.next(((_a = commit.author) === null || _a === void 0 ? void 0 : _a.avatar_url) || _DefaultAvatar);
                                url.next(((_b = commit.author) === null || _b === void 0 ? void 0 : _b.html_url) || '');
                                name.next(commit.commit.author.name);
                                const dateString = !!options.date ? options.date : commit.commit.author.date;
                                date.next(new Date(dateString).toDateString());
                            }
                        });
                    }
                }
            }
        }
    });
    return renderer.create("a", { class: classes.author, href: url, target: "_blank" },
        renderer.create("div", { class: classes.avatar, style: rxl `background-image: url(${avatar})` }),
        renderer.create("div", { class: classes.texts },
            renderer.create("div", { class: classes.name }, name),
            renderer.create("div", { class: classes.date },
                renderer.create("label", null, "Last Publish:"),
                " ",
                date)));
}
export const Author$ = /*#__PURE__*/ transport(Author);
//# sourceMappingURL=index.js.map