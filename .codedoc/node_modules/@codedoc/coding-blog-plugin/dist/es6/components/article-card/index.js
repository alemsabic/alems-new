import { rl } from '@connectv/html';
import { transport } from '@connectv/sdh/transport';
import { BehaviorSubject } from 'rxjs';
import { ArticleCardStyle } from './style';
function extractTitle(title) {
    var _a;
    if (title) {
        if ((_a = window.source) === null || _a === void 0 ? void 0 : _a.title) {
            const prefix = window.source.title.base + window.source.title.connector;
            if (title.startsWith(prefix))
                return title.substr(prefix.length);
            else
                return title;
        }
    }
    else
        return title;
}
export function ArticleCard(options, renderer) {
    const classes = this.theme.classes(ArticleCardStyle);
    const src = new BehaviorSubject(options.src);
    const img = new BehaviorSubject('https://coding.blog/banner.svg');
    const title = new BehaviorSubject('Some Article');
    const desc = new BehaviorSubject('Some description for this article');
    this.track({
        bind() {
            var _a;
            let url = options.src;
            if (options.src.startsWith('/')) {
                url = `${((_a = window.source) === null || _a === void 0 ? void 0 : _a.namespace) || ''}${options.src}`;
            }
            src.next(url);
            fetch(url)
                .then(response => response.text())
                .then(html => {
                const marker = renderer.create("div", null);
                marker.innerHTML = html;
                let candidate;
                if (candidate = marker.querySelector('meta[property="og:title"], meta[name="twitter:title"]'))
                    title.next(extractTitle(candidate.getAttribute('content')) || title.value);
                else if (candidate = marker.querySelector('head > title'))
                    title.next(extractTitle(candidate.textContent) || title.value);
                if (candidate = marker.querySelector('meta[property="og:description"],' +
                    'meta[name="twitter:description"],' +
                    'meta[name="description"]')) {
                    desc.next(candidate.getAttribute('content') || '');
                }
                else if (candidate = marker.querySelector('#-codedoc-container > p')) {
                    desc.next(candidate.textContent || '');
                }
                else {
                    desc.next('');
                }
                if (candidate = marker.querySelector('meta[property="og:image"], meta[name="twitter:image"]'))
                    img.next(candidate.getAttribute('content') || img.value);
                else if (candidate = marker.querySelector('img[data-hero]')) {
                    img.next(candidate.getAttribute('src') || img.value);
                }
            });
        }
    });
    return renderer.create("a", Object.assign({}, (options.style === 'box' ? { 'data-article-card-grid': '' } : {}), { href: src, class: `${classes.card} ${options.style === 'box' ? classes.cardcol : ''}` }),
        renderer.create("div", { style: rl `background-image: url('${img}')`, class: classes.img }),
        renderer.create("div", { class: classes.text },
            renderer.create("h1", null, title),
            renderer.create("p", null, desc)));
}
export const ArticleCard$ = /*#__PURE__*/ transport(ArticleCard);
//# sourceMappingURL=index.js.map